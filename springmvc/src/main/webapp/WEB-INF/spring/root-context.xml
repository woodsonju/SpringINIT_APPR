<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	">
	
	<context:annotation-config />
	<context:component-scan base-package="fr.dawan.springcore" />
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/springmvc3?useSSL=true" />
        <property name="username" value="root" />
        <property name="password" value="" />
    </bean>
    
    <!--  
    	En suite Spring crée un bean  ...ici on configure une EntityManagerFactory JPA partagée dans un contexte
    	 d'application Spring
    	o Il va charger le driver jdbc
		    	Le pilote JDBC, c’est une classe Java, une bibliothèque, un ensemble de classe, qui vont être
		    	 chargé en mémoire, 
		    et qui vont permettre à l’application Java de communiquer avec le système de gestion de base
		     de données. 
		    et va se connecter avec la base de données avec le mot de passe et username
		    Il va créer les tables,  pour cela on lui donne le package, là où se trouvent les entités
    -->
    <bean id="entityManagerFactoryBean" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- Packages où seront recherché les entitées jpa-->
        <property name="packagesToScan" value="fr.dawan.springmvc.beans" />
        <!-- jpaVendorAdapter est une notion propre à Spring; Il permet de brancher différentes implementations 
        de JPA
        	C'est le JpaVendorAdaptor qui fournit la configuration exacte de l'implementation de JPA;
         -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
            </props>
        </property>
    </bean>
    <!--  -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
    
    <!-- Création d'un bean pour la  gestion des transction -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactoryBean" />
    </bean>
    
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 
    	L'annotation @Transactional peut être utilisée pour indiquer au conteneur les méthodes qui doivent 
    	s'exécuter dans un contexte transactionnel.
    	
    	Pour permettre une utilisation de l'annotation @Transactional, 
    	il faut utiliser le tag <annotation-driven> de l'espace de nommage tx 
    	pour préciser à Spring que les annotations sont utilisées pour la définition des transactions.
    	
    	Son attribut transaction-manager permet de préciser l'identifiant du bean qui encapsule
    	 le gestionnaire de transactions (TransactionManager) utilisé pour gérer les transactions
    	  : son utilisation n'est obligatoire que si l'id du gestionnaire de transactions est différent de "transactionManager".
    	
     -->
    
           <!-- dao -->
	<bean id="dao" class="fr.dawan.springmvc.dao.UserDaoImpl" />
	
	<!--Service-->
	<bean id="service" class="fr.dawan.springmvc.service.UserServiceImpl">
		
	</bean>

	
</beans>
